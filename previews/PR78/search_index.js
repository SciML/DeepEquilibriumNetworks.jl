var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"manual/deqs/#Deep-Equilibrium-Models","page":"DEQ Layers","title":"Deep Equilibrium Models","text":"","category":"section"},{"location":"manual/deqs/#Standard-Models","page":"DEQ Layers","title":"Standard Models","text":"","category":"section"},{"location":"manual/deqs/","page":"DEQ Layers","title":"DEQ Layers","text":"DeepEquilibriumNetwork\nSkipDeepEquilibriumNetwork","category":"page"},{"location":"manual/deqs/#DeepEquilibriumNetworks.DeepEquilibriumNetwork","page":"DEQ Layers","title":"DeepEquilibriumNetworks.DeepEquilibriumNetwork","text":"DeepEquilibriumNetwork(model, solver; jacobian_regularization::Bool=false,\n                       sensealg=SteadyStateAdjoint(), kwargs...)\n\nDeep Equilibrium Network as proposed in Shaojie Bai, J. Zico Kolter, Vladlen Koltun (2019).\n\nArguments\n\nmodel:Lux Neural Network.\nsolver: Solver for the optimization problem (See: ContinuousDEQSolver & DiscreteDEQSolver).\njacobian_regularization: If true, Jacobian Loss is computed and stored in the DeepEquilibriumSolution.\nsensealg: See SciMLSensitivity.SteadyStateAdjoint.\nkwargs: Additional Parameters that are directly passed to SciMLBase.solve.\n\nExample\n\nusing DeepEquilibriumNetworks, Lux, Random, OrdinaryDiffEq\n\nmodel = DeepEquilibriumNetwork(Parallel(+, Dense(2, 2; use_bias=false),\n                                        Dense(2, 2; use_bias=false)),\n                               ContinuousDEQSolver(VCABM3(); abstol=0.01f0, reltol=0.01f0);\n                               save_everystep=true)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\n\nmodel(rand(rng, Float32, 2, 1), ps, st)\n\nSee also: SkipDeepEquilibriumNetwork, MultiScaleDeepEquilibriumNetwork, MultiScaleSkipDeepEquilibriumNetwork.\n\n\n\n\n\n","category":"type"},{"location":"manual/deqs/#DeepEquilibriumNetworks.SkipDeepEquilibriumNetwork","page":"DEQ Layers","title":"DeepEquilibriumNetworks.SkipDeepEquilibriumNetwork","text":"SkipDeepEquilibriumNetwork(model, shortcut, solver; jacobian_regularization::Bool=false,\n                           sensealg=DeepEquilibriumAdjoint(0.1f0, 0.1f0, 10), kwargs...)\n\nSkip Deep Equilibrium Network as proposed in Avik Pal, Alan Edelman, Christopher Rackauckas (2022)\n\nArguments\n\nmodel: Neural Network.\nshortcut: Shortcut for the network (pass nothing for SkipRegDEQ).\nsolver: Solver for the optimization problem (See: ContinuousDEQSolver & DiscreteDEQSolver).\njacobian_regularization: If true, Jacobian Loss is computed and stored in the DeepEquilibriumSolution.\nsensealg: See SciMLSensitivity.SteadyStateAdjoint.\nkwargs: Additional Parameters that are directly passed to SciMLBase.solve.\n\nExample\n\nusing DeepEquilibriumNetworks, Lux, Random, OrdinaryDiffEq\n\n## SkipDEQ\nmodel = SkipDeepEquilibriumNetwork(Parallel(+, Dense(2, 2; use_bias=false),\n                                            Dense(2, 2; use_bias=false)), Dense(2, 2),\n                                   ContinuousDEQSolver(VCABM3(); abstol=0.01f0,\n                                                       reltol=0.01f0); save_everystep=true)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\n\nmodel(rand(rng, Float32, 2, 1), ps, st)\n\n## SkipRegDEQ\nmodel = SkipDeepEquilibriumNetwork(Parallel(+, Dense(2, 2; use_bias=false),\n                                            Dense(2, 2; use_bias=false)), nothing,\n                                   ContinuousDEQSolver(VCABM3(); abstol=0.01f0,\n                                                       reltol=0.01f0); save_everystep=true)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\n\nmodel(rand(rng, Float32, 2, 1), ps, st)\n\nSee also: DeepEquilibriumNetwork, MultiScaleDeepEquilibriumNetwork, MultiScaleSkipDeepEquilibriumNetwork\n\n\n\n\n\n","category":"type"},{"location":"manual/deqs/#MultiScale-Models","page":"DEQ Layers","title":"MultiScale Models","text":"","category":"section"},{"location":"manual/deqs/","page":"DEQ Layers","title":"DEQ Layers","text":"MultiScaleDeepEquilibriumNetwork\nMultiScaleSkipDeepEquilibriumNetwork\nMultiScaleNeuralODE","category":"page"},{"location":"manual/deqs/#DeepEquilibriumNetworks.MultiScaleDeepEquilibriumNetwork","page":"DEQ Layers","title":"DeepEquilibriumNetworks.MultiScaleDeepEquilibriumNetwork","text":"MultiScaleDeepEquilibriumNetwork(main_layers::Tuple, mapping_layers::Matrix,\n                                 post_fuse_layer::Union{Nothing,Tuple}, solver, scales;\n                                 sensealg=SteadyStateAdjoint(), kwargs...)\n\nMultiscale Deep Equilibrium Network as proposed in Shaojie Bai, Vladlen Koltun, J. Zico Kolter (2020)\n\nArguments\n\nmain_layers: Tuple of Neural Networks. The first network needs to take a tuple of 2 arrays, the other ones only take 1 input.\nmapping_layers: Matrix of Neural Networks. The (i j)^th network takes the output of i^th main_layer and passes it to the j^th main_layer.\npost_fuse_layer: Tuple of Neural Networks. Each of the scales is passed through this layer.\nsolver: Solver for the optimization problem (See: ContinuousDEQSolver & DiscreteDEQSolver).\nscales: Output scales.\nsensealg: See SciMLSensitivity.SteadyStateAdjoint.\nkwargs: Additional Parameters that are directly passed to SciMLBase.solve.\n\nExample\n\nusing DeepEquilibriumNetworks, Lux, Random, OrdinaryDiffEq\n\nmain_layers = (Parallel(+, Dense(4, 4, tanh), Dense(4, 4, tanh)), Dense(3, 3, tanh),\n               Dense(2, 2, tanh), Dense(1, 1, tanh))\n\nmapping_layers = [NoOpLayer() Dense(4, 3, tanh) Dense(4, 2, tanh) Dense(4, 1, tanh);\n                  Dense(3, 4, tanh) NoOpLayer() Dense(3, 2, tanh) Dense(3, 1, tanh);\n                  Dense(2, 4, tanh) Dense(2, 3, tanh) NoOpLayer() Dense(2, 1, tanh);\n                  Dense(1, 4, tanh) Dense(1, 3, tanh) Dense(1, 2, tanh) NoOpLayer()]\n\nsolver = ContinuousDEQSolver(VCABM3(); abstol=0.01f0, reltol=0.01f0)\n\nmodel = MultiScaleDeepEquilibriumNetwork(main_layers, mapping_layers, nothing, solver,\n                                         ((4,), (3,), (2,), (1,)); save_everystep=true)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\nx = rand(rng, Float32, 4, 1)\n\nmodel(x, ps, st)\n\nSee also: DeepEquilibriumNetwork, SkipDeepEquilibriumNetwork, MultiScaleSkipDeepEquilibriumNetwork\n\n\n\n\n\n","category":"type"},{"location":"manual/deqs/#DeepEquilibriumNetworks.MultiScaleSkipDeepEquilibriumNetwork","page":"DEQ Layers","title":"DeepEquilibriumNetworks.MultiScaleSkipDeepEquilibriumNetwork","text":"MultiScaleSkipDeepEquilibriumNetwork(main_layers::Tuple, mapping_layers::Matrix,\n                                     post_fuse_layer::Union{Nothing,Tuple},\n                                     shortcut_layers::Union{Nothing,Tuple}, solver,\n                                     scales; sensealg=SteadyStateAdjoint(), kwargs...)\n\nMultiscale Deep Equilibrium Network as proposed in Shaojie Bai, Vladlen Koltun, J. Zico Kolter (2020) combined with Skip Deep Equilibrium Network as proposed in Avik Pal, Alan Edelman, Christopher Rackauckas (2022).\n\nArguments\n\nmain_layers: Tuple of Neural Networks. The first network needs to take a tuple of 2 arrays, the other ones only take 1 input.\nmapping_layers: Matrix of Neural Networks. The (i j)^th network takes the output of i^th main_layer and passes it to the j^th main_layer.\npost_fuse_layer: Tuple of Neural Networks. Each of the scales is passed through this layer.\nshortcut_layers: Shortcut for the network (pass nothing for SkipRegDEQ).\nsolver: Solver for the optimization problem (See: ContinuousDEQSolver & DiscreteDEQSolver).\nscales: Output scales.\nsensealg: See SciMLSensitivity.SteadyStateAdjoint.\nkwargs: Additional Parameters that are directly passed to SciMLBase.solve.\n\nExample\n\nusing DeepEquilibriumNetworks, Lux, Random, OrdinaryDiffEq\n\n# MSkipDEQ\nmain_layers = (Parallel(+, Dense(4, 4, tanh), Dense(4, 4, tanh)), Dense(3, 3, tanh),\n               Dense(2, 2, tanh), Dense(1, 1, tanh))\n\nmapping_layers = [NoOpLayer() Dense(4, 3, tanh) Dense(4, 2, tanh) Dense(4, 1, tanh);\n                  Dense(3, 4, tanh) NoOpLayer() Dense(3, 2, tanh) Dense(3, 1, tanh);\n                  Dense(2, 4, tanh) Dense(2, 3, tanh) NoOpLayer() Dense(2, 1, tanh);\n                  Dense(1, 4, tanh) Dense(1, 3, tanh) Dense(1, 2, tanh) NoOpLayer()]\n\nsolver = ContinuousDEQSolver(VCABM3(); abstol=0.01f0, reltol=0.01f0)\n\nshortcut_layers = (Dense(4, 4, tanh), Dense(4, 3, tanh), Dense(4, 2, tanh),\n                   Dense(4, 1, tanh))\n\nmodel = MultiScaleSkipDeepEquilibriumNetwork(main_layers, mapping_layers, nothing,\n                                             shortcut_layers, solver,\n                                             ((4,), (3,), (2,), (1,)); save_everystep=true)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\nx = rand(rng, Float32, 4, 2)\n\nmodel(x, ps, st)\n\n# MSkipRegDEQ\nmodel = MultiScaleSkipDeepEquilibriumNetwork(main_layers, mapping_layers, nothing, nothing,\n                                             solver, ((4,), (3,), (2,), (1,));\n                                             save_everystep=true)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\nx = rand(rng, Float32, 4, 2)\n\nmodel(x, ps, st)\n\nSee also: DeepEquilibriumNetwork, SkipDeepEquilibriumNetwork, MultiScaleDeepEquilibriumNetwork\n\n\n\n\n\n","category":"type"},{"location":"manual/deqs/#DeepEquilibriumNetworks.MultiScaleNeuralODE","page":"DEQ Layers","title":"DeepEquilibriumNetworks.MultiScaleNeuralODE","text":"MultiScaleNeuralODE(main_layers::Tuple, mapping_layers::Matrix,\n                                 post_fuse_layer::Union{Nothing,Tuple}, solver, scales;\n                                 sensealg=InterpolatingAdjoint(; autojacvec=ZygoteVJP()),\n                                 kwargs...)\n\nMultiscale Neural ODE with Input Injection.\n\nArguments\n\nmain_layers: Tuple of Neural Networks. The first network needs to take a tuple of 2 arrays, the other ones only take 1 input.\nmapping_layers: Matrix of Neural Networks. The (i j)^th network takes the output of i^th main_layer and passes it to the j^th main_layer.\npost_fuse_layer: Tuple of Neural Networks. Each of the scales is passed through this layer.\nsolver: Solver for the optimization problem (See: ContinuousDEQSolver & DiscreteDEQSolver).\nscales: Output scales.\nsensealg: See SciMLSensitivity.InterpolatingAdjoint.\nkwargs: Additional Parameters that are directly passed to SciMLBase.solve.\n\nExample\n\nusing DeepEquilibriumNetworks, Lux, Random, OrdinaryDiffEq\n\nmain_layers = (Parallel(+, Dense(4, 4, tanh), Dense(4, 4, tanh)), Dense(3, 3, tanh),\n               Dense(2, 2, tanh), Dense(1, 1, tanh))\n\nmapping_layers = [NoOpLayer() Dense(4, 3, tanh) Dense(4, 2, tanh) Dense(4, 1, tanh);\n                  Dense(3, 4, tanh) NoOpLayer() Dense(3, 2, tanh) Dense(3, 1, tanh);\n                  Dense(2, 4, tanh) Dense(2, 3, tanh) NoOpLayer() Dense(2, 1, tanh);\n                  Dense(1, 4, tanh) Dense(1, 3, tanh) Dense(1, 2, tanh) NoOpLayer()]\n\nmodel = MultiScaleNeuralODE(main_layers, mapping_layers, nothing, VCAB3(),\n                            ((4,), (3,), (2,), (1,)); save_everystep=true)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\nx = rand(rng, Float32, 4, 1)\n\nmodel(x, ps, st)\n\nSee also: DeepEquilibriumNetwork, SkipDeepEquilibriumNetwork, MultiScaleDeepEquilibriumNetwork, MultiScaleSkipDeepEquilibriumNetwork\n\n\n\n\n\n","category":"type"},{"location":"manual/misc/#Miscellaneous","page":"Miscellaneous","title":"Miscellaneous","text":"","category":"section"},{"location":"manual/misc/","page":"Miscellaneous","title":"Miscellaneous","text":"DeepEquilibriumSolution","category":"page"},{"location":"manual/misc/#DeepEquilibriumNetworks.DeepEquilibriumSolution","page":"Miscellaneous","title":"DeepEquilibriumNetworks.DeepEquilibriumSolution","text":"DeepEquilibriumSolution(z_star, u₀, residual, jacobian_loss, nfe)\n\nStores the solution of a DeepEquilibriumNetwork and its variants.\n\nFields\n\nz_star: Steady-State or the value reached due to maxiters\nu0: Initial Condition\nresidual: Difference of the z^* and f(z^* x)\njacobian_loss: Jacobian Stabilization Loss (see individual networks to see how it can be computed).\nnfe: Number of Function Evaluations\n\n\n\n\n\n","category":"type"},{"location":"manual/solvers/#Dynamical-System-Variants","page":"Dynamical Systems","title":"Dynamical System Variants","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":"Shaojie Bai, J. Zico Kolter, Vladlen Koltun (2019) introduced Discrete Deep Equilibrium Models which drives a Discrete Dynamical System to its steady-state. Avik Pal, Alan Edelman, Christopher Rackauckas (2022) extends this framework to Continuous Dynamical Systems which converge to the steady-stable in a more stable fashion. For a detailed discussion refer to Avik Pal, Alan Edelman, Christopher Rackauckas (2022).","category":"page"},{"location":"manual/solvers/#Continuous-DEQs","page":"Dynamical Systems","title":"Continuous DEQs","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":"ContinuousDEQSolver","category":"page"},{"location":"manual/solvers/#DeepEquilibriumNetworks.ContinuousDEQSolver","page":"Dynamical Systems","title":"DeepEquilibriumNetworks.ContinuousDEQSolver","text":"ContinuousDEQSolver(alg=VCABM3(); mode=SteadyStateTerminationMode.RelSafeBest,\n                    abstol=1.0f-8, reltol=1.0f-6, abstol_termination=abstol,\n                    reltol_termination=reltol, tspan=Inf32, kwargs...)\n\nSolver for Continuous DEQ Problem (Avik Pal, Alan Edelman, Christopher Rackauckas (2022)). Effectively a wrapper around DynamicSS with more sensible defaults for DEQs.\n\nArguments\n\nalg: Algorithm to solve the ODEProblem. (Default: VCAB3())\nmode: Termination Mode of the solver. See the documentation for NLSolveTerminationCondition for more information. (Default: NLSolveTerminationMode.RelSafeBest)\nabstol: Absolute tolerance for time stepping. (Default: 1f-8)\nreltol: Relative tolerance for time stepping. (Default: 1f-6)\nabstol_termination: Absolute tolerance for termination. (Default: abstol)\nreltol_termination: Relative tolerance for termination. (Default: reltol)\ntspan: Time span. Users should not change this value, instead control termination through maxiters in solve. (Default: Inf32)\nkwargs: Additional Parameters that are directly passed to NLSolveTerminationCondition.\n\nSee also: DiscreteDEQSolver\n\n\n\n\n\n","category":"type"},{"location":"manual/solvers/#Discrete-DEQs","page":"Dynamical Systems","title":"Discrete DEQs","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":"DiscreteDEQSolver","category":"page"},{"location":"manual/solvers/#DeepEquilibriumNetworks.DiscreteDEQSolver","page":"Dynamical Systems","title":"DeepEquilibriumNetworks.DiscreteDEQSolver","text":"DiscreteDEQSolver(alg = LBroyden(; batched=true,\n                                 termination_condition=NLSolveTerminationCondition(NLSolveTerminationMode.RelSafe;\n                                                                                   abstol=1.0f-8, reltol=1.0f-6))\n\nSolver for Discrete DEQ Problem (Shaojie Bai, J. Zico Kolter, Vladlen Koltun (2019)). Similar to SSrootfind but provides more flexibility needed for solving DEQ problems.\n\nArguments\n\nalg: Algorithm to solve the Nonlinear Problem. (Default: LBroyden)\n\nSee also: ContinuousDEQSolver\n\n\n\n\n\n","category":"type"},{"location":"#DeepEquilibriumNetworks:-(Fast)-Deep-Equilibrium-Networks","page":"Home","title":"DeepEquilibriumNetworks: (Fast) Deep Equilibrium Networks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DeepEquilibriumNetworks.jl is a framework built on top of DifferentialEquations.jl and Lux.jl, enabling the efficient training and inference for Deep Equilibrium Networks (Infinitely Deep Neural Networks).","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install DeepEquilibriumNetworks.jl, use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"DeepEquilibriumNetworks\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Quick-start\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia import DeepEquilibriumNetworks as DEQs import Lux import Random import Zygote","category":"page"},{"location":"","page":"Home","title":"Home","text":"seed = 0 rng = Random.default_rng() Random.seed!(rng, seed)","category":"page"},{"location":"","page":"Home","title":"Home","text":"model = Lux.Chain(Lux.Dense(2, 2),                   DEQs.DeepEquilibriumNetwork(Lux.Parallel(+, Lux.Dense(2, 2; bias=false),                                                            Lux.Dense(2, 2; bias=false)),                                               DEQs.ContinuousDEQSolver(; abstol=0.1f0,                                                                        reltol=0.1f0,                                                                        abstoltermination=0.1f0,                                                                        reltoltermination=0.1f0)))","category":"page"},{"location":"","page":"Home","title":"Home","text":"ps, st = gpu.(Lux.setup(rng, model)) x = gpu(rand(rng, Float32, 2, 1)) y = gpu(rand(rng, Float32, 2, 1))","category":"page"},{"location":"","page":"Home","title":"Home","text":"gs = Zygote.gradient(p -> sum(abs2, model(x, p, st)[1][1] .- y), ps)[1]","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n## Citation\n\nIf you are using this project for research or other academic purposes, consider citing our\npaper:\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"bibtex @misc{pal2022mixing,   title={Mixing Implicit and Explicit Deep Learning with Skip DEQs and Infinite Time Neural          ODEs (Continuous DEQs)},    author={Avik Pal and Alan Edelman and Christopher Rackauckas},   year={2022},   eprint={2201.12240},   archivePrefix={arXiv},   primaryClass={cs.LG} }","category":"page"},{"location":"","page":"Home","title":"Home","text":"\nFor specific algorithms, check the respective documentations and cite the corresponding\npapers.\n\n## Contributing\n\n  - Please refer to the\n    [SciML ColPrac: Contributor's Guide on Collaborative Practices for Community Packages](https://github.com/SciML/ColPrac/blob/master/README.md)\n    for guidance on PRs, issues, and other matters relating to contributing to SciML.\n\n  - See the [SciML Style Guide](https://github.com/SciML/SciMLStyle) for common coding practices and other style decisions.\n  - There are a few community forums:\n    \n      + The #diffeq-bridged and #sciml-bridged channels in the\n        [Julia Slack](https://julialang.org/slack/)\n      + The #diffeq-bridged and #sciml-bridged channels in the\n        [Julia Zulip](https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged)\n      + On the [Julia Discourse forums](https://discourse.julialang.org)\n      + See also [SciML Community page](https://sciml.ai/community/)\n\n## Reproducibility\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@raw html <details><summary>The documentation of this SciML package was built using these direct dependencies,</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@example using Pkg # hide Pkg.status() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@raw html </details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@raw html <details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@example using InteractiveUtils # hide versioninfo() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@raw html </details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@raw html <details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@example using Pkg # hide Pkg.status(; mode=PKGMODE_MANIFEST) # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@raw html </details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@raw html You can also download the  <a href=\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@eval using TOML version = TOML.parse(read(\"../../Project.toml\", String))[\"version\"] name = TOML.parse(read(\"../../Project.toml\", String))[\"name\"] link = \"https://github.com/SciML/\" *        name *        \".jl/tree/gh-pages/v\" *        version *        \"/assets/Manifest.toml\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@raw html \">manifest</a> file and the <a href=\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@eval using TOML version = TOML.parse(read(\"../../Project.toml\", String))[\"version\"] name = TOML.parse(read(\"../../Project.toml\", String))[\"name\"] link = \"https://github.com/SciML/\" *        name *        \".jl/tree/gh-pages/v\" *        version *        \"/assets/Project.toml\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@raw html \">project</a> file. ```","category":"page"}]
}
